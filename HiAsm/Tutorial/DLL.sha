Make(delphi)
Add(DLL,15316970,91,147)
{
}
Add(InfoTip,16464751,77,14)
{
 Info=#
 Width=508
 Height=963
}
Add(Shape,6712503,77,14)
{
 Width=508
 Height=25
 Text="Создание динамических библиотек DLL"
 Font=[Times New Roman,14,1,0,1]
 Color=10789024
}
Add(InfoTip,5050909,85,49)
{
 Info=#233: Использование DLL в своих программах позволяет выносить часть кода вне основного приложения, что дает возможность изменять ф-ционирование уже собранной программы. Одним словом позволяет делать плагины к вашим собственным программам.|
 Font=[MS Sans Serif,10,0,0,1]
 Frame=1
 Transparent=1
 HAlign=0
 Width=491
 Height=67
}
Add(Shape,14299916,77,119)
{
 Width=508
 Height=18
 Text="Описание и примеры"
 Font=[Times New Roman,12,1,8388608,1]
 Color=12639424
}
Add(InfoTip,4753282,133,147)
{
 Info=#268: Компонент имеет 4 стандартных св-ва для задания списков имен соответствующих точек. Именно эти имена в дальнейшем будут автоматически выведены в качестве точек компоента UseHiDLL, который как раз и позволяет наиболее комфортно использовать созданные DLL в дальнейшем.|
 Font=[MS Sans Serif,10,0,0,1]
 Frame=1
 Transparent=1
 HAlign=0
 Width=449
 Height=81
}
Add(InfoTip,205133,84,231)
{
 Info=#264: Кроме того у компонента есть св-во Icon, которое определяет иконку DLL. Увидеть эту иконку так же можно только при использование компоента UseHiDLL и нигде больше. Сама DLL в проводнике Explorer, например, будет иметь стандартную иконку, а не ту, что вы зададите.|
 Font=[MS Sans Serif,10,0,0,1]
 Frame=1
 Transparent=1
 HAlign=0
 Width=498
 Height=67
}
Add(InfoTip,8789940,84,301)
{
 Info=#367: И так . Указав все имена точек, а так же задав при необходимости иконку, вы можете скомпилировать проект и затем использовать полученную DLL с помощью двух стандартных компонент HiAsm - Обращение к DLL(CallDLL) и DLL HiAsm(UseHiDLL). Оба компонента расположены на вкладке Разное и какой из них вы будете использовать решать вам, на основе приведенного ниже описания.|
 Font=[MS Sans Serif,10,0,0,1]
 Frame=1
 Transparent=1
 HAlign=0
 Width=498
 Height=95
}
Add(CallDLL,251132,91,434)
{
}
Add(Shape,14229944,77,406)
{
 Width=508
 Height=18
 Text="Использование CallDLL"
 Font=[Times New Roman,12,1,8388608,1]
 Color=12639424
}
Add(InfoTip,12238087,133,434)
{
 Info=#187: Этот компонент в первую очередь создан для использования внешних DLL в вашей программе, т.е. DLL написанных не на HiAsm, но с использованием необходимых для правильной работы стандартов.|
 Font=[MS Sans Serif,10,0,0,1]
 Frame=1
 Transparent=1
 HAlign=0
 Width=449
 Height=67
}
Add(InfoTip,1499078,84,497)
{
 Info=#532:Именно поэтому HiAsm компилирует DLL в формате, совместимом с этим компонентом, чтобы вы наряду с внешними DLL бибилиотеками  могли так же использовать и DLL, генерируемые HiAsm. Однако этот компонет использует специальные "мосты", которые позволяют перевести используемые им типы данных в типы, понятные большинству языков программирования. Это очевидно нужно для того, чтобы DLL могла быть написана на любом языке, а не только Object Pascal. Поэтому сама процедуру обмена данными между ними универсальна, но от того не эффективна.|362: Текущая реализация компонента расчитана на использование в проекте однократной инициализации DLL. Это значит, что если DLL имеет внутреннюю память(скажем подсчитывает число вызовов какого-то своего метода), то её испольование в нескольких местах проекта приведет к тому, что внутренняя память у них будет общая и избавится от этого не возможно никаким способом.|
 Font=[MS Sans Serif,10,0,0,1]
 Frame=1
 Transparent=1
 HAlign=0
 Width=498
 Height=242
}
Add(Shape,13295747,77,742)
{
 Width=508
 Height=18
 Text="Использование UseHiDLL"
 Font=[Times New Roman,12,1,8388608,1]
 Color=12639424
}
Add(UseHiDLL,12686153,91,770)
{
}
Add(InfoTip,11979913,133,770)
{
 Info=#65: Все эти недостатки устраняются с применением данного компонента.|
 Font=[MS Sans Serif,10,0,0,1]
 Frame=1
 Transparent=1
 HAlign=0
 Width=449
}
Add(InfoTip,15934400,84,805)
{
 Info=#380: Он уже не использует никаких "мостов" и данные напрямую идут из схемы в DLL и обратно. Так же компонент сохраняет все данные DLL внутри себя и поэтому при использование нескольких его копий они не являются общими. Т.е. использование этого компонента ничем не будет отличатся от использования мультиэлемента за исключением того, что реализации его находится в DLL, а не в проекте.|251: Кроме того при задание имени DLL(без расширения, в отличие от CallDLL) компонент автоматически извлечет из нее имена всех имеющихся точек и добавит их к себе. Так же он поступит и с иконкой - стандартная иконка компонета будет заменена на иконку DLL.|
 Font=[MS Sans Serif,10,0,0,1]
 Frame=1
 Transparent=1
 HAlign=0
 Width=498
 Height=165
}
